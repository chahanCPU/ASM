macro_rules! BITMASK(
    ($n:expr) => (
        ((1 << $n) - 1)
    );
);
macro_rules! BITSEL(
    ($n:expr) => (
        (1 << ($n)) 
    );
);
fn bit_true32(x:u32,d:usize) -> bool{
    return (x&BITSEL!(d))>0
}
fn bit_true64(x:u64,d:usize) -> bool{
  return (x&BITSEL!(d))>0
}
fn bit_true128(x:u128,d:usize) -> bool{
  return (x&BITSEL!(d))>0
}
pub fn inv_fpu(f: f32) -> f32{
  let x = f.to_bits();
  //`default_nettype none
  /*
  module finv(
	  input wire [31:0] x,
    output wire [31:0] y);
    */
	//wire s;
	//wire [7:0] e;
  //wire [22:0] m;
  let s = x>>31;
  let e = (x>>23) & BITMASK!(8);
  let m = x & BITMASK!(23);
 
	//wire [23:0] ma;
  let ma = m+(1<<23);
  
  let init = match ((ma>>15)&BITMASK!(8)){
    0b00000000 => {0b11111111100000000011111111},
    0b00000001 => {0b11111110100000100011110010},
    0b00000010 => {0b11111101100001100011000010},
    0b00000011 => {0b11111100100011000001010110},
    0b00000100 => {0b11111011100100111110011001},
    0b00000101 => {0b11111010100111011001110100},
    0b00000110 => {0b11111001101010010011010000},
    0b00000111 => {0b11111000101101101010011000},
    0b00001000 => {0b11110111110001011110110110},
    0b00001001 => {0b11110110110101110000010101},
    0b00001010 => {0b11110101111010011110011111},
    0b00001011 => {0b11110100111111101001000010},
    0b00001100 => {0b11110100000101001111100111},
    0b00001101 => {0b11110011001011010001111011},
    0b00001110 => {0b11110010010001101111101011},
    0b00001111 => {0b11110001011000101000100010},
    0b00010000 => {0b11110000011111111100001111},
    0b00010001 => {0b11101111100111101010011110},
    0b00010010 => {0b11101110101111110010111100},
    0b00010011 => {0b11101101111000010101010111},
    0b00010100 => {0b11101101000001010001011110},
    0b00010101 => {0b11101100001010100110111110},
    0b00010110 => {0b11101011010100010101100110},
    0b00010111 => {0b11101010011110011101000101},
    0b00011000 => {0b11101001101000111101001001},
    0b00011001 => {0b11101000110011110101100010},
    0b00011010 => {0b11100111111111000110000000},
    0b00011011 => {0b11100111001010101110010001},
    0b00011100 => {0b11100110010110101110000111},
    0b00011101 => {0b11100101100011000101010001},
    0b00011110 => {0b11100100101111110011011111},
    0b00011111 => {0b11100011111100111000100010},
    0b00100000 => {0b11100011001010010100001011},
    0b00100001 => {0b11100010011000000110001100},
    0b00100010 => {0b11100001100110001110010100},
    0b00100011 => {0b11100000110100101100010110},
    0b00100100 => {0b11100000000011100000000011},
    0b00100101 => {0b11011111010010101001001101},
    0b00100110 => {0b11011110100010000111100110},
    0b00100111 => {0b11011101110001111011000001},
    0b00101000 => {0b11011101000010000011001111},
    0b00101001 => {0b11011100010010100000000011},
    0b00101010 => {0b11011011100011010001010000},
    0b00101011 => {0b11011010110100010110101001},
    0b00101100 => {0b11011010000101110000000001},
    0b00101101 => {0b11011001010111011101001011},
    0b00101110 => {0b11011000101001011101111011},
    0b00101111 => {0b11010111111011110010000101},
    0b00110000 => {0b11010111001110011001011011},
    0b00110001 => {0b11010110100001010011110011},
    0b00110010 => {0b11010101110100100000111111},
    0b00110011 => {0b11010101001000000000110101},
    0b00110100 => {0b11010100011011110011001000},
    0b00110101 => {0b11010011101111110111101110},
    0b00110110 => {0b11010011000100001110011011},
    0b00110111 => {0b11010010011000110111000100},
    0b00111000 => {0b11010001101101110001011101},
    0b00111001 => {0b11010001000010111101011100},
    0b00111010 => {0b11010000011000011010110111},
    0b00111011 => {0b11001111101110001001100010},
    0b00111100 => {0b11001111000100001001010011},
    0b00111101 => {0b11001110011010011010000000},
    0b00111110 => {0b11001101110000111011011110},
    0b00111111 => {0b11001101000111101101100100},
    0b01000000 => {0b11001100011110110000000111},
    0b01000001 => {0b11001011110110000010111111},
    0b01000010 => {0b11001011001101100110000000},
    0b01000011 => {0b11001010100101011001000001},
    0b01000100 => {0b11001001111101011011111010},
    0b01000101 => {0b11001001010101101110100000},
    0b01000110 => {0b11001000101110010000101010},
    0b01000111 => {0b11001000000111000010001111},
    0b01001000 => {0b11000111100000000011000111},
    0b01001001 => {0b11000110111001010011001000},
    0b01001010 => {0b11000110010010110010001001},
    0b01001011 => {0b11000101101100100000000011},
    0b01001100 => {0b11000101000110011100101011},
    0b01001101 => {0b11000100100000100111111010},
    0b01001110 => {0b11000011111011000001101000},
    0b01001111 => {0b11000011010101101001101011},
    0b01010000 => {0b11000010110000011111111100},
    0b01010001 => {0b11000010001011100100010100},
    0b01010010 => {0b11000001100110110110101001},
    0b01010011 => {0b11000001000010010110110011},
    0b01010100 => {0b11000000011110000100101100},
    0b01010101 => {0b10111111111010000000001011},
    0b01010110 => {0b10111111010110001001001001},
    0b01010111 => {0b10111110110010011111011111},
    0b01011000 => {0b10111110001111000011000100},
    0b01011001 => {0b10111101101011110011110001},
    0b01011010 => {0b10111101001000110001100000},
    0b01011011 => {0b10111100100101111100001000},
    0b01011100 => {0b10111100000011010011100011},
    0b01011101 => {0b10111011100000110111101010},
    0b01011110 => {0b10111010111110101000010110},
    0b01011111 => {0b10111010011100100101100000},
    0b01100000 => {0b10111001111010101111000001},
    0b01100001 => {0b10111001011001000100110011},
    0b01100010 => {0b10111000110111100110101110},
    0b01100011 => {0b10111000010110010100101101},
    0b01100100 => {0b10110111110101001110101000},
    0b01100101 => {0b10110111010100010100011010},
    0b01100110 => {0b10110110110011100101111011},
    0b01100111 => {0b10110110010011000011000111},
    0b01101000 => {0b10110101110010101011110110},
    0b01101001 => {0b10110101010010100000000010},
    0b01101010 => {0b10110100110010011111100110},
    0b01101011 => {0b10110100010010101010011011},
    0b01101100 => {0b10110011110011000000011100},
    0b01101101 => {0b10110011010011100001100010},
    0b01101110 => {0b10110010110100001101100111},
    0b01101111 => {0b10110010010101000100100111},
    0b01110000 => {0b10110001110110000110011011},
    0b01110001 => {0b10110001010111010010111101},
    0b01110010 => {0b10110000111000101010001001},
    0b01110011 => {0b10110000011010001011111000},
    0b01110100 => {0b10101111111011111000000110},
    0b01110101 => {0b10101111011101101110101100},
    0b01110110 => {0b10101110111111101111100110},
    0b01110111 => {0b10101110100001111010101101},
    0b01111000 => {0b10101110000100001111111110},
    0b01111001 => {0b10101101100110101111010011},
    0b01111010 => {0b10101101001001011000100110},
    0b01111011 => {0b10101100101100001011110011},
    0b01111100 => {0b10101100001111001000110101},
    0b01111101 => {0b10101011110010001111100110},
    0b01111110 => {0b10101011010101100000000010},
    0b01111111 => {0b10101010111000111010000100},
    0b10000000 => {0b10101010011100011101101000},
    0b10000001 => {0b10101010000000001010101000},
    0b10000010 => {0b10101001100100000000111111},
    0b10000011 => {0b10101001001000000000101010},
    0b10000100 => {0b10101000101100001001100011},
    0b10000101 => {0b10101000010000011011100110},
    0b10000110 => {0b10100111110100110110101111},
    0b10000111 => {0b10100111011001011010111001},
    0b10001000 => {0b10100110111110000111111111},
    0b10001001 => {0b10100110100010111101111101},
    0b10001010 => {0b10100110000111111100110000},
    0b10001011 => {0b10100101101101000100010010},
    0b10001100 => {0b10100101010010010100011111},
    0b10001101 => {0b10100100110111101101010100},
    0b10001110 => {0b10100100011101001110101100},
    0b10001111 => {0b10100100000010111000100011},
    0b10010000 => {0b10100011101000101010110100},
    0b10010001 => {0b10100011001110100101011101},
    0b10010010 => {0b10100010110100101000011000},
    0b10010011 => {0b10100010011010110011100011},
    0b10010100 => {0b10100010000001000110111000},
    0b10010101 => {0b10100001100111100010010100},
    0b10010110 => {0b10100001001110000101110100},
    0b10010111 => {0b10100000110100110001010100},
    0b10011000 => {0b10100000011011100100101111},
    0b10011001 => {0b10100000000010100000000010},
    0b10011010 => {0b10011111101001100011001010},
    0b10011011 => {0b10011111010000101110000010},
    0b10011100 => {0b10011110111000000000100111},
    0b10011101 => {0b10011110011111011010110110},
    0b10011110 => {0b10011110000110111100101011},
    0b10011111 => {0b10011101101110100110000010},
    0b10100000 => {0b10011101010110010110111001},
    0b10100001 => {0b10011100111110001111001011},
    0b10100010 => {0b10011100100110001110110101},
    0b10100011 => {0b10011100001110010101110100},
    0b10100100 => {0b10011011110110100100000100},
    0b10100101 => {0b10011011011110111001100010},
    0b10100110 => {0b10011011000111010110001100},
    0b10100111 => {0b10011010101111111001111101},
    0b10101000 => {0b10011010011000100100110010},
    0b10101001 => {0b10011010000001010110101000},
    0b10101010 => {0b10011001101010001111011101},
    0b10101011 => {0b10011001010011001111001100},
    0b10101100 => {0b10011000111100010101110011},
    0b10101101 => {0b10011000100101100011001111},
    0b10101110 => {0b10011000001110110111011100},
    0b10101111 => {0b10010111111000010010011001},
    0b10110000 => {0b10010111100001110100000000},
    0b10110001 => {0b10010111001011011100010001},
    0b10110010 => {0b10010110110101001011000111},
    0b10110011 => {0b10010110011111000000100000},
    0b10110100 => {0b10010110001000111100011010},
    0b10110101 => {0b10010101110010111110110000},
    0b10110110 => {0b10010101011101000111100001},
    0b10110111 => {0b10010101000111010110101001},
    0b10111000 => {0b10010100110001101100000110},
    0b10111001 => {0b10010100011100000111110100},
    0b10111010 => {0b10010100000110101001110011},
    0b10111011 => {0b10010011110001010001111101},
    0b10111100 => {0b10010011011100000000010010},
    0b10111101 => {0b10010011000110110100101110},
    0b10111110 => {0b10010010110001101111001110},
    0b10111111 => {0b10010010011100101111110001},
    0b11000000 => {0b10010010000111110110010010},
    0b11000001 => {0b10010001110011000010110001},
    0b11000010 => {0b10010001011110010101001010},
    0b11000011 => {0b10010001001001101101011011},
    0b11000100 => {0b10010000110101001011100001},
    0b11000101 => {0b10010000100000101111011010},
    0b11000110 => {0b10010000001100011001000100},
    0b11000111 => {0b10001111111000001000011011},
    0b11001000 => {0b10001111100011111101011110},
    0b11001001 => {0b10001111001111111000001010},
    0b11001010 => {0b10001110111011111000011101},
    0b11001011 => {0b10001110100111111110010101},
    0b11001100 => {0b10001110010100001001101110},
    0b11001101 => {0b10001110000000011010101000},
    0b11001110 => {0b10001101101100110000111111},
    0b11001111 => {0b10001101011001001100110001},
    0b11010000 => {0b10001101000101101101111100},
    0b11010001 => {0b10001100110010010100011111},
    0b11010010 => {0b10001100011111000000010101},
    0b11010011 => {0b10001100001011110001011111},
    0b11010100 => {0b10001011111000100111111000},
    0b11010101 => {0b10001011100101100011100000},
    0b11010110 => {0b10001011010010100100010100},
    0b11010111 => {0b10001010111111101010010010},
    0b11011000 => {0b10001010101100110101010111},
    0b11011001 => {0b10001010011010000101100010},
    0b11011010 => {0b10001010000111011010110001},
    0b11011011 => {0b10001001110100110101000001},
    0b11011100 => {0b10001001100010010100010001},
    0b11011101 => {0b10001001001111111000011111},
    0b11011110 => {0b10001000111101100001101000},
    0b11011111 => {0b10001000101011001111101011},
    0b11100000 => {0b10001000011001000010100110},
    0b11100001 => {0b10001000000110111010010110},
    0b11100010 => {0b10000111110100110110111010},
    0b11100011 => {0b10000111100010111000010000},
    0b11100100 => {0b10000111010000111110010110},
    0b11100101 => {0b10000110111111001001001010},
    0b11100110 => {0b10000110101101011000101010},
    0b11100111 => {0b10000110011011101100110101},
    0b11101000 => {0b10000110001010000101101000},
    0b11101001 => {0b10000101111000100011000010},
    0b11101010 => {0b10000101100111000101000001},
    0b11101011 => {0b10000101010101101011100011},
    0b11101100 => {0b10000101000100010110100111},
    0b11101101 => {0b10000100110011000110001010},
    0b11101110 => {0b10000100100001111010001011},
    0b11101111 => {0b10000100010000110010101000},
    0b11110000 => {0b10000011111111101111100000},
    0b11110001 => {0b10000011101110110000110000},
    0b11110010 => {0b10000011011101110110010111},
    0b11110011 => {0b10000011001101000000010100},
    0b11110100 => {0b10000010111100001110100100},
    0b11110101 => {0b10000010101011100001000111},
    0b11110110 => {0b10000010011010110111111010},
    0b11110111 => {0b10000010001010010010111100},
    0b11111000 => {0b10000001111001110010001011},
    0b11111001 => {0b10000001101001010101100101},
    0b11111010 => {0b10000001011000111101001010},
    0b11111011 => {0b10000001001000101000110110},
    0b11111100 => {0b10000000111000011000101010},
    0b11111101 => {0b10000000101000001100100011},
    0b11111110 => {0b10000000011000000100100000},
    0b11111111 => {0b10000000001000000000100000},
    _          => {0}
  };
  //wire [25:0] init;
	//assign init = INV(ma[22:15]);

	//wire [74:0] k1;
 	let k1 = ma as u128 * init as u128 * init as u128;

 	//wire [75:0] c1;
 	let c1 = BITMASK!(76) & ((1u128<<80) + ((init as u128)<<50) - k1);
  //??
  // println!("c1:{:b}",c1);

  //wire [25:0] x1;
 	let x1 = if bit_true128(c1, 48) && (c1&BITMASK!(48) != 0 || bit_true128(c1, 49)) {BITMASK!(26)&((c1>>49) as u32 + 1)}
             else {BITMASK!(26)&((c1>>49) as u32)};
  // println!("x1:{:b}",x1);
 	//wire [74:0] k2;
 	let k2 = ma as u128 * x1 as u128 * x1 as u128;

 	//wire [75:0] c2;
 	let c2 = BITMASK!(76) & ((1u128<<80) + ((x1 as u128)<<50) - k2);
  //??

  //wire [25:0] x2;
  let x2 = if bit_true128(c2, 48) && (c2&BITMASK!(48) != 0 || bit_true128(c2, 49)) {BITMASK!(26)&((c2>>49) as u32 + 1)}
  else {BITMASK!(26)&((c2>>49) as u32)};

 	//wire [7:0] ey;
 	//wire [22:0] my;

 	let my = if e == 254 {  if bit_true32(x2, 3) {(x2>>4) + 1} 
           else {x2>>4} 
   } else if e == 253 { 
     if bit_true32(x2, 2) {BITMASK!(23)&((x2>>3) + 1)}  else {(x2>>3)}
  } else if bit_true32(x2, 1) {BITMASK!(23)&((x2>>2) + 1)} else {BITMASK!(23)&(x2>>2)};

  let ey = BITMASK!(8) & if e == 254 {(1<<10)+!e - 1}else {(1<<10)+!e - 2};

  let y = if my == 0 {(s<<31)+((BITMASK!(8) & (ey + 1))<<23)+my} else {(s<<31)+(ey<<23)+my};
  f32::from_bits(y) 
  //endmodule

  //`default_nettype wire
 
}
pub fn mul_fpu(f1:f32, f2:f32) -> f32{
  //  `default_nettype none
  /*
  module fmul(
    input wire [31:0] x1,
    input wire [31:0] x2,
    output wire [31:0] y,
    output wire ovf);
  */
  //wire s1;
  //wire s2;
  //wire [7:0] e1;
  //wire [7:0] e2;
  //wire [22:0] m1;
  //wire [22:0] m2;
  let x1 = f1.to_bits();
  let s1 = x1>>31;
  let e1 = (x1>>23) & BITMASK!(8);
  let m1 = x1 & BITMASK!(23);
  let x2 = f2.to_bits();
  let s2 = x2>>31;
  let e2 = (x2>>23) & BITMASK!(8);
  let m2 = x2 & BITMASK!(23);
  //wire sy;
  let sy = s1 ^ s2;

  
  //wire [23:0] m1a;
  //wire [23:0] m2a;

  let m1a = if e1 == 0 {m1} else {m1+(1<<23)};
  let m2a = if e2 == 0 {m2} else {m2+(1<<23)};
 
  //wire [7:0] e1a;
  //wire [7:0] e2a;

  let e1a = if e1 == 0 {1} else {e1};
  let e2a = if e2 == 0 {1} else {e2};

  //wire [47:0] mmul;

  let mmul = (m1a as u64) * (m2a as u64);
  
  //wire [5:0] se;
  let se =  if bit_true64(mmul, 47) { 0} else
            if bit_true64(mmul, 46) { 1} else
            if bit_true64(mmul, 45) { 2} else
            if bit_true64(mmul, 44) { 3} else
            if bit_true64(mmul, 43) { 4} else
            if bit_true64(mmul, 42) { 5} else
            if bit_true64(mmul, 41) { 6} else
            if bit_true64(mmul, 40) { 7} else
            if bit_true64(mmul, 39) { 8} else
            if bit_true64(mmul, 38) { 9} else
            if bit_true64(mmul, 37) {10} else
            if bit_true64(mmul, 36) {11} else
            if bit_true64(mmul, 35) {12} else
            if bit_true64(mmul, 34) {13} else
            if bit_true64(mmul, 33) {14} else
            if bit_true64(mmul, 32) {15} else
            if bit_true64(mmul, 31) {16} else
            if bit_true64(mmul, 30) {17} else
            if bit_true64(mmul, 29) {18} else
            if bit_true64(mmul, 28) {19} else
            if bit_true64(mmul, 27) {20} else
            if bit_true64(mmul, 26) {21} else
            if bit_true64(mmul, 25) {22} else
            if bit_true64(mmul, 24) {23} else
            if bit_true64(mmul, 23) {24} else
            if bit_true64(mmul, 22) {25} else
            if bit_true64(mmul, 21) {26} else
            if bit_true64(mmul, 20) {27} else
            if bit_true64(mmul, 19) {28} else
            if bit_true64(mmul, 18) {29} else
            if bit_true64(mmul, 17) {30} else
            if bit_true64(mmul, 16) {31} else
            if bit_true64(mmul, 15) {32} else
            if bit_true64(mmul, 14) {33} else
            if bit_true64(mmul, 13) {34} else
            if bit_true64(mmul, 12) {35} else
            if bit_true64(mmul, 11) {36} else
            if bit_true64(mmul, 10) {37} else
            if bit_true64(mmul,  9) {38} else
            if bit_true64(mmul,  8) {39} else
            if bit_true64(mmul,  7) {40} else
            if bit_true64(mmul,  6) {41} else
            if bit_true64(mmul,  5) {42} else
            if bit_true64(mmul,  4) {43} else
            if bit_true64(mmul,  3) {44} else
            if bit_true64(mmul,  2) {45} else
            if bit_true64(mmul,  1) {46} else
            if bit_true64(mmul,  0) {47} else {48};

  //wire [47:0] myft;
  let myft =BITMASK!(48)&
            if bit_true64(mmul, 47) {mmul} else
            if bit_true64(mmul, 46) {mmul<< 1} else
            if bit_true64(mmul, 45) {mmul<< 2} else
            if bit_true64(mmul, 44) {mmul<< 3} else
            if bit_true64(mmul, 43) {mmul<< 4} else
            if bit_true64(mmul, 42) {mmul<< 5} else
            if bit_true64(mmul, 41) {mmul<< 6} else
            if bit_true64(mmul, 40) {mmul<< 7} else
            if bit_true64(mmul, 39) {mmul<< 8} else
            if bit_true64(mmul, 38) {mmul<< 9} else
            if bit_true64(mmul, 37) {mmul<<10} else
            if bit_true64(mmul, 36) {mmul<<11} else
            if bit_true64(mmul, 35) {mmul<<12} else
            if bit_true64(mmul, 34) {mmul<<13} else
            if bit_true64(mmul, 33) {mmul<<14} else
            if bit_true64(mmul, 32) {mmul<<15} else
            if bit_true64(mmul, 31) {mmul<<16} else
            if bit_true64(mmul, 30) {mmul<<17} else
            if bit_true64(mmul, 29) {mmul<<18} else
            if bit_true64(mmul, 28) {mmul<<19} else
            if bit_true64(mmul, 27) {mmul<<20} else
            if bit_true64(mmul, 26) {mmul<<21} else
            if bit_true64(mmul, 25) {mmul<<22} else
            if bit_true64(mmul, 24) {mmul<<23} else
            if bit_true64(mmul, 23) {mmul<<24} else
            if bit_true64(mmul, 22) {mmul<<25} else
            if bit_true64(mmul, 21) {mmul<<26} else
            if bit_true64(mmul, 20) {mmul<<27} else
            if bit_true64(mmul, 19) {mmul<<28} else
            if bit_true64(mmul, 18) {mmul<<29} else
            if bit_true64(mmul, 17) {mmul<<30} else
            if bit_true64(mmul, 16) {mmul<<31} else
            if bit_true64(mmul, 15) {mmul<<32} else
            if bit_true64(mmul, 14) {mmul<<33} else
            if bit_true64(mmul, 13) {mmul<<34} else
            if bit_true64(mmul, 12) {mmul<<35} else
            if bit_true64(mmul, 11) {mmul<<36} else
            if bit_true64(mmul, 10) {mmul<<37} else
            if bit_true64(mmul,  9) {mmul<<38} else
            if bit_true64(mmul,  8) {mmul<<39} else
            if bit_true64(mmul,  7) {mmul<<40} else
            if bit_true64(mmul,  6) {mmul<<41} else
            if bit_true64(mmul,  5) {mmul<<42} else
            if bit_true64(mmul,  4) {mmul<<43} else
            if bit_true64(mmul,  3) {mmul<<44} else
            if bit_true64(mmul,  2) {mmul<<45} else
            if bit_true64(mmul,  1) {mmul<<46} else
            if bit_true64(mmul,  0) {mmul<<47} else {0};
    

  //wire [9:0] eyrt; 
  let eyrt = BITMASK!(10) & ((1<<16) + e1a + e2a - se - 126);
  //??
  //wire [7:0] eyr;
  //wire [9:0] eyrit;
  //wire [7:0] eyri;
  let eyr =  if bit_true32(eyrt , 9) {0} else if bit_true32(eyrt , 8) {255} else {BITMASK!(8)&eyrt };
  let eyrit = eyrt + 1;
  let eyri = if bit_true32(eyrit, 9) {0} else if bit_true32(eyrit, 8) {255} else {BITMASK!(8)&eyrit};

  //wire [9:0] ss;
  let ss = BITMASK!(10) & (!eyrt + 2);
  //??
  //wire [70:0] myf;
  //wire [24:0] myr;
  let myf = if bit_true32(eyrt , 9) { ((myft as u128)<<23) >> (ss&BITMASK!(8))} else
            if eyrt==0              { ((myft as u128)<<23) >> 1} else {((myft as u128)<<23)};
  let myr = if bit_true64(myf as u64, 46) {(myf>>47) as u32 + 1} else {(myf>>47) as u32};

  //wire [7:0] ey;
  //wire [22:0] my;
  let ey =  if bit_true32(myr , 24) {eyri} else 
            if bit_true32(myr , 23) && eyr==0 {1} else 
            if myr&BITMASK!(24) == 0 {0} else {eyr};
  let my =  if bit_true32(myr , 24) {0} else
            if bit_true32(myr , 23) && eyr==0 {(myr&BITMASK!(22))<<1} else {myr&BITMASK!(23)};

  //wire nzm1 = |m1;
  //wire nzm2 = |m2;
  let nzm1 = m1 != 0;
  let nzm2 = m2 != 0;

  let y = if e2 == 255 && nzm2             {(s2<<31)+(255<<23)+(1<<22)+(m2&BITMASK!(22))} else
          if e1 == 255 && nzm1             {(s1<<31)+(255<<23)+(1<<22)+(m1&BITMASK!(22))} else
          if e1 == 255 && e2 == 0 && !nzm2 {( 1<<31)+(255<<23)+(1<<22)+(m1&BITMASK!(22))} else
          if e2 == 255 && e1 == 0 && !nzm1 {( 1<<31)+(255<<23)+(1<<22)+(m2&BITMASK!(22))} else
          if e1 == 255 || e2 == 255 {(sy<<31)+(255<<23)} else
          if e1 < 255 && e2 < 255 && ey == 255 {(sy<<31)+(255<<23)} else
          {(sy<<31)+(ey<<23)+my}; 
  let ovf = if e1 < 255 && e2 < 255 && ey == 255 {1} else {0};
  f32::from_bits(y)
  //endmodule
  //`default_nettype wire

}
pub fn sqrt_fpu(f: f32) -> f32{
    //return f.sqrt();
    let x = f.to_bits();
    //module fsqrt(
    //  input wire [31:0] x,
    //  output wire [31:0] y);
    
      //wire s;
      //wire [7:0] e;
      //wire [22:0] m;
    
      //assign {s,e,m} = x;
      let s = x>>31;
      let e = (x>>23) & BITMASK!(8);
      let m = x & BITMASK!(23);
      
      //wire [24:0] ma;
      let ma =  if e>0 && (e & BITMASK!(1))==0 {(1<<23)+m} else 
      if e>0 && (e & BITMASK!(1))==1 {(1<<24)+(m<<1)} else
      if bit_true32(m,22) {(m<<1)} else
      if bit_true32(m,21) || bit_true32(m,20){(m<< 1) & BITMASK!(25)} else 
      if bit_true32(m,19) || bit_true32(m,18){(m<< 3) & BITMASK!(25)} else 
      if bit_true32(m,17) || bit_true32(m,16){(m<< 5) & BITMASK!(25)} else 
      if bit_true32(m,15) || bit_true32(m,14){(m<< 7) & BITMASK!(25)} else 
      if bit_true32(m,13) || bit_true32(m,12){(m<< 9) & BITMASK!(25)} else 
      if bit_true32(m,11) || bit_true32(m,10){(m<<11) & BITMASK!(25)} else 
      if bit_true32(m, 9) || bit_true32(m, 8){(m<<13) & BITMASK!(25)} else 
      if bit_true32(m, 7) || bit_true32(m, 6){(m<<15) & BITMASK!(25)} else 
      if bit_true32(m, 5) || bit_true32(m, 4){(m<<17) & BITMASK!(25)} else 
      if bit_true32(m, 3) || bit_true32(m, 2){(m<<19) & BITMASK!(25)} else 
                                            {(m<<21) & BITMASK!(25)};
      // println!("ma = {:b}",ma);
      //wire [7:0] ea;
      let ea =  if e>0 {((e>>1) + 64)} else
      if bit_true32(m,22){64} else
      if bit_true32(m,21)|| bit_true32(m,20){63} else
      if bit_true32(m,19)|| bit_true32(m,18){62} else
      if bit_true32(m,17)|| bit_true32(m,16){61} else
      if bit_true32(m,15)|| bit_true32(m,14){60} else
      if bit_true32(m,13)|| bit_true32(m,12){59} else
      if bit_true32(m,11)|| bit_true32(m,10){58} else
      if bit_true32(m, 9)|| bit_true32(m, 8){57} else
      if bit_true32(m, 7)|| bit_true32(m, 6){56} else
      if bit_true32(m, 5)|| bit_true32(m, 4){55} else
      if bit_true32(m, 3)|| bit_true32(m, 2){54} else {53};
                
      //wire [27:0] init;
      let ma2417 = ma >> 17;
      let init =    if  ma2417 == 0b1000000  {0b0101101000101000011111100000} else
                    if  ma2417 ==  0b01000001 {0b0101100101110111101000001010} else
                    if  ma2417 ==  0b01000010 {0b0101100011001010110001001000} else
                    if  ma2417 ==  0b01000011 {0b0101100000100001110000110110} else
                    if  ma2417 ==  0b01000100 {0b0101011101111100011110010010} else
                    if  ma2417 ==  0b01000101 {0b0101011011011010110000111000} else
                    if  ma2417 ==  0b01000110 {0b0101011000111100100000011101} else
                    if  ma2417 ==  0b01000111 {0b0101010110100001100101010010} else
                    if  ma2417 ==  0b01001000 {0b0101010100001001110111111101} else
                    if  ma2417 ==  0b01001001 {0b0101010001110101010001011101} else
                    if  ma2417 ==  0b01001010 {0b0101001111100011101011000101} else
                    if  ma2417 ==  0b01001011 {0b0101001101010100111110011110} else
                    if  ma2417 ==  0b01001100 {0b0101001011001001000101100001} else
                    if  ma2417 ==  0b01001101 {0b0101001000111111111010011010} else
                    if  ma2417 ==  0b01001110 {0b0101000110111001010111100110} else
                    if  ma2417 ==  0b01001111 {0b0101000100110101010111110001} else
                    if  ma2417 ==  0b01010000 {0b0101000010110011110101110110} else
                    if  ma2417 ==  0b01010001 {0b0101000000110100101100111110} else
                    if  ma2417 ==  0b01010010 {0b0100111110110111111000011111} else
                    if  ma2417 ==  0b01010011 {0b0100111100111101010011111100} else
                    if  ma2417 ==  0b01010100 {0b0100111011000100111011000100} else
                    if  ma2417 ==  0b01010101 {0b0100111001001110101001110001} else
                    if  ma2417 ==  0b01010110 {0b0100110111011010011100000111} else
                    if  ma2417 ==  0b01010111 {0b0100110101101000001110010100} else
                    if  ma2417 ==  0b01011000 {0b0100110011110111111100110001} else
                    if  ma2417 ==  0b01011001 {0b0100110010001001100011111111} else
                    if  ma2417 ==  0b01011010 {0b0100110000011101000000101001} else
                    if  ma2417 ==  0b01011011 {0b0100101110110010001111011111} else
                    if  ma2417 ==  0b01011100 {0b0100101101001001001101011100} else
                    if  ma2417 ==  0b01011101 {0b0100101011100001110111100010} else
                    if  ma2417 ==  0b01011110 {0b0100101001111100001010111001} else
                    if  ma2417 ==  0b01011111 {0b0100101000011000000100101111} else
                    if  ma2417 ==  0b01100000 {0b0100100110110101100010011011} else
                    if  ma2417 ==  0b01100001 {0b0100100101010100100001011001} else
                    if  ma2417 ==  0b01100010 {0b0100100011110100111111001001} else
                    if  ma2417 ==  0b01100011 {0b0100100010010110111001010011} else
                    if  ma2417 ==  0b01100100 {0b0100100000111010001101100100} else
                    if  ma2417 ==  0b01100101 {0b0100011111011110111001101110} else
                    if  ma2417 ==  0b01100110 {0b0100011110000100111011100101} else
                    if  ma2417 ==  0b01100111 {0b0100011100101100010001000111} else
                    if  ma2417 ==  0b01101000 {0b0100011011010100111000010011} else
                    if  ma2417 ==  0b01101001 {0b0100011001111110101111001011} else
                    if  ma2417 ==  0b01101010 {0b0100011000101001110011111001} else
                    if  ma2417 ==  0b01101011 {0b0100010111010110000100101000} else
                    if  ma2417 ==  0b01101100 {0b0100010110000011011111101000} else
                    if  ma2417 ==  0b01101101 {0b0100010100110010000011001100} else
                    if  ma2417 ==  0b01101110 {0b0100010011100001101101101011} else
                    if  ma2417 ==  0b01101111 {0b0100010010010010011101011110} else
                    if  ma2417 ==  0b01110000 {0b0100010001000100010001000100} else
                    if  ma2417 ==  0b01110001 {0b0100001111110111000110111011} else
                    if  ma2417 ==  0b01110010 {0b0100001110101010111101101000} else
                    if  ma2417 ==  0b01110011 {0b0100001101011111110011110001} else
                    if  ma2417 ==  0b01110100 {0b0100001100010101100111111101} else
                    if  ma2417 ==  0b01110101 {0b0100001011001100011000111001} else
                    if  ma2417 ==  0b01110110 {0b0100001010000100000101010010} else
                    if  ma2417 ==  0b01110111 {0b0100001000111100101011111000} else
                    if  ma2417 ==  0b01111000 {0b0100000111110110001011011111} else
                    if  ma2417 ==  0b01111001 {0b0100000110110000100010111010} else
                    if  ma2417 ==  0b01111010 {0b0100000101101011110001000000} else
                    if  ma2417 ==  0b01111011 {0b0100000100100111110100101100} else
                    if  ma2417 ==  0b01111100 {0b0100000011100100101100110111} else
                    if  ma2417 ==  0b01111101 {0b0100000010100010011000011110} else
                    if  ma2417 ==  0b01111110 {0b0100000001100000110110100010} else
                    if  ma2417 ==  0b01111111 {0b0100000000100000000110000001} else
                    if  ma2417 ==  0b10000000 {0b011111111100000000101111110} else
                    if  ma2417 ==  0b10000001 {0b011111110100000110101011110} else
                    if  ma2417 ==  0b10000010 {0b011111101100010010011100110} else
                    if  ma2417 ==  0b10000011 {0b011111100100100011111011101} else
                    if  ma2417 ==  0b10000100 {0b011111011100111011000001011} else
                    if  ma2417 ==  0b10000101 {0b011111010101010111100111100} else
                    if  ma2417 ==  0b10000110 {0b011111001101111001100111010} else
                    if  ma2417 ==  0b10000111 {0b011111000110100000111010010} else
                    if  ma2417 ==  0b10001000 {0b011110111111001101011010011} else
                    if  ma2417 ==  0b10001001 {0b011110110111111111000001100} else
                    if  ma2417 ==  0b10001010 {0b011110110000110101101001101} else
                    if  ma2417 ==  0b10001011 {0b011110101001110001001101001} else
                    if  ma2417 ==  0b10001100 {0b011110100010110001100110011} else
                    if  ma2417 ==  0b10001101 {0b011110011011110110101111110} else
                    if  ma2417 ==  0b10001110 {0b011110010101000000100100000} else
                    if  ma2417 ==  0b10001111 {0b011110001110001110111101111} else
                    if  ma2417 ==  0b10010000 {0b011110000111100001111000011} else
                    if  ma2417 ==  0b10010001 {0b011110000000111001001110100} else
                    if  ma2417 ==  0b10010010 {0b011101111010010100111011011} else
                    if  ma2417 ==  0b10010011 {0b011101110011110100111010001} else
                    if  ma2417 ==  0b10010100 {0b011101101101011001000110011} else
                    if  ma2417 ==  0b10010101 {0b011101100111000001011011100} else
                    if  ma2417 ==  0b10010110 {0b011101100000101101110101001} else
                    if  ma2417 ==  0b10010111 {0b011101011010011110001111000} else
                    if  ma2417 ==  0b10011000 {0b011101010100010010100100101} else
                    if  ma2417 ==  0b10011001 {0b011101001110001010110010010} else
                    if  ma2417 ==  0b10011010 {0b011101001000000110110011110} else
                    if  ma2417 ==  0b10011011 {0b011101000010000110100101000} else
                    if  ma2417 ==  0b10011100 {0b011100111100001010000010100} else
                    if  ma2417 ==  0b10011101 {0b011100110110010001001000010} else
                    if  ma2417 ==  0b10011110 {0b011100110000011011110010101} else
                    if  ma2417 ==  0b10011111 {0b011100101010101001111110000} else
                    if  ma2417 ==  0b10100000 {0b011100100100111011100111000} else
                    if  ma2417 ==  0b10100001 {0b011100011111010000101010001} else
                    if  ma2417 ==  0b10100010 {0b011100011001101001000100000} else
                    if  ma2417 ==  0b10100011 {0b011100010100000100110001010} else
                    if  ma2417 ==  0b10100100 {0b011100001110100011101110111} else
                    if  ma2417 ==  0b10100101 {0b011100001001000101111001100} else
                    if  ma2417 ==  0b10100110 {0b011100000011101011001110001} else
                    if  ma2417 ==  0b10100111 {0b011011111110010011101001110} else
                    if  ma2417 ==  0b10101000 {0b011011111000111111001001100} else
                    if  ma2417 ==  0b10101001 {0b011011110011101101101010010} else
                    if  ma2417 ==  0b10101010 {0b011011101110011111001001011} else
                    if  ma2417 ==  0b10101011 {0b011011101001010011100100000} else
                    if  ma2417 ==  0b10101100 {0b011011100100001010110111100} else
                    if  ma2417 ==  0b10101101 {0b011011011111000101000001001} else
                    if  ma2417 ==  0b10101110 {0b011011011010000001111110010} else
                    if  ma2417 ==  0b10101111 {0b011011010101000001101100010} else
                    if  ma2417 ==  0b10110000 {0b011011010000000100001000110} else
                    if  ma2417 ==  0b10110001 {0b011011001011001001010001010} else
                    if  ma2417 ==  0b10110010 {0b011011000110010001000011011} else
                    if  ma2417 ==  0b10110011 {0b011011000001011011011100110} else
                    if  ma2417 ==  0b10110100 {0b011010111100101000011010111} else
                    if  ma2417 ==  0b10110101 {0b011010110111110111111011110} else
                    if  ma2417 ==  0b10110110 {0b011010110011001001111100111} else
                    if  ma2417 ==  0b10110111 {0b011010101110011110011100010} else
                    if  ma2417 ==  0b10111000 {0b011010101001110101010111110} else
                    if  ma2417 ==  0b10111001 {0b011010100101001110101101001} else
                    if  ma2417 ==  0b10111010 {0b011010100000101010011010100} else
                    if  ma2417 ==  0b10111011 {0b011010011100001000011101101} else
                    if  ma2417 ==  0b10111100 {0b011010010111101000110100101} else
                    if  ma2417 ==  0b10111101 {0b011010010011001011011101100} else
                    if  ma2417 ==  0b10111110 {0b011010001110110000010110100} else
                    if  ma2417 ==  0b10111111 {0b011010001010010111011101100} else
                    if  ma2417 ==  0b11000000 {0b011010000110000000110000110} else
                    if  ma2417 ==  0b11000001 {0b011010000001101100001110100} else
                    if  ma2417 ==  0b11000010 {0b011001111101011001110100111} else
                    if  ma2417 ==  0b11000011 {0b011001111001001001100010010} else
                    if  ma2417 ==  0b11000100 {0b011001110100111011010100110} else
                    if  ma2417 ==  0b11000101 {0b011001110000101111001010110} else
                    if  ma2417 ==  0b11000110 {0b011001101100100101000010101} else
                    if  ma2417 ==  0b11000111 {0b011001101000011100111010110} else
                    if  ma2417 ==  0b11001000 {0b011001100100010110110001011} else
                    if  ma2417 ==  0b11001001 {0b011001100000010010100101010} else
                    if  ma2417 ==  0b11001010 {0b011001011100010000010100100} else
                    if  ma2417 ==  0b11001011 {0b011001011000001111111101110} else
                    if  ma2417 ==  0b11001100 {0b011001010100010001011111100} else
                    if  ma2417 ==  0b11001101 {0b011001010000010100111000010} else
                    if  ma2417 ==  0b11001110 {0b011001001100011010000110101} else
                    if  ma2417 ==  0b11001111 {0b011001001000100001001001001} else
                    if  ma2417 ==  0b11010000 {0b011001000100101001111110011} else
                    if  ma2417 ==  0b11010001 {0b011001000000110100100101000} else
                    if  ma2417 ==  0b11010010 {0b011000111101000000111011110} else
                    if  ma2417 ==  0b11010011 {0b011000111001001111000001010} else
                    if  ma2417 ==  0b11010100 {0b011000110101011110110100000} else
                    if  ma2417 ==  0b11010101 {0b011000110001110000010011000} else
                    if  ma2417 ==  0b11010110 {0b011000101110000011011100111} else
                    if  ma2417 ==  0b11010111 {0b011000101010011000010000011} else
                    if  ma2417 ==  0b11011000 {0b011000100110101110101100011} else
                    if  ma2417 ==  0b11011001 {0b011000100011000110101111011} else
                    if  ma2417 ==  0b11011010 {0b011000011111100000011000101} else
                    if  ma2417 ==  0b11011011 {0b011000011011111011100110101} else
                    if  ma2417 ==  0b11011100 {0b011000011000011000011000011} else
                    if  ma2417 ==  0b11011101 {0b011000010100110110101100101} else
                    if  ma2417 ==  0b11011110 {0b011000010001010110100010100} else
                    if  ma2417 ==  0b11011111 {0b011000001101110111111000101} else
                    if  ma2417 ==  0b11100000 {0b011000001010011010101110001} else
                    if  ma2417 ==  0b11100001 {0b011000000110111111000001111} else
                    if  ma2417 ==  0b11100010 {0b011000000011100100110010111} else
                    if  ma2417 ==  0b11100011 {0b011000000000001100000000001} else
                    if  ma2417 ==  0b11100100 {0b010111111100110100101000100} else
                    if  ma2417 ==  0b11100101 {0b010111111001011110101011000} else
                    if  ma2417 ==  0b11100110 {0b010111110110001010000110110} else
                    if  ma2417 ==  0b11100111 {0b010111110010110110111010110} else
                    if  ma2417 ==  0b11101000 {0b010111101111100101000110000} else
                    if  ma2417 ==  0b11101001 {0b010111101100010100100111101} else
                    if  ma2417 ==  0b11101010 {0b010111101001000101011110110} else
                    if  ma2417 ==  0b11101011 {0b010111100101110111101010011} else
                    if  ma2417 ==  0b11101100 {0b010111100010101011001001101} else
                    if  ma2417 ==  0b11101101 {0b010111011111011111111011101} else
                    if  ma2417 ==  0b11101110 {0b010111011100010101111111100} else
                    if  ma2417 ==  0b11101111 {0b010111011001001101010100100} else
                    if  ma2417 ==  0b11110000 {0b010111010110000101111001101} else
                    if  ma2417 ==  0b11110001 {0b010111010010111111101110000} else
                    if  ma2417 ==  0b11110010 {0b010111001111111010110001000} else
                    if  ma2417 ==  0b11110011 {0b010111001100110111000001110} else
                    if  ma2417 ==  0b11110100 {0b010111001001110100011111011} else
                    if  ma2417 ==  0b11110101 {0b010111000110110011001001010} else
                    if  ma2417 ==  0b11110110 {0b010111000011110010111110011} else
                    if  ma2417 ==  0b11110111 {0b010111000000110011111110010} else
                    if  ma2417 ==  0b11111000 {0b010110111101110110000111111} else
                    if  ma2417 ==  0b11111001 {0b010110111010111001011010101} else
                    if  ma2417 ==  0b11111010 {0b010110110111111101110101110} else
                    if  ma2417 ==  0b11111011 {0b010110110101000011011000101} else
                    if  ma2417 ==  0b11111100 {0b010110110010001010000010100} else
                    if  ma2417 ==  0b11111101 {0b010110101111010001110010100} else
                    if  ma2417 ==  0b11111110 {0b010110101100011010101000001} else {0b010110101001100100100010101};
    // println!("init = {:b}",init);
      
      //wire [50:0] k1;
      let k1:u64 = (ma as u64 * init as u64)&BITMASK!(51);
      // println!("k1 = {:b}",k1);
    
      //wire [49:0] l1;
      let l1 = (((init>>2)&BITMASK!(25)) * ((init>>2)&BITMASK!(25)))&BITMASK!(50);
      // println!("l1 = {:b}",l1);
    
      //wire [49:0] m11;
      let m11 =((k1>>26)* (l1>>25)) & BITMASK!(50);
      // println!("m11 = {:b}",m11);
    
      //wire [29:0] n1;
      let n1 = (init<<1) + init;
      // println!("n1 = {:b}",n1);
    
      //wire [30:0] p1;
      let p1 = BITMASK!(31)&(0x100000000 + (n1<<1) - (m11>>20));//?
      // println!("p1 = {:b}",p1);
    
      //wire [26:0] y1;
      let y1 = BITMASK!(27)&if bit_true64(p1, 1) && (bit_true64(p1, 0) || bit_true64(p1, 2)) {((p1>>2)&BITMASK!(27)) + 1} else {((p1>>2)&BITMASK!(27))};
      //??
      //{p1[28:2]} + 28'b1って桁合ってるの？
      // println!("y1 = {:b}",y1);
    
    
    ////////////////////
    
      //wire [50:0] k2;
      let k2 = (ma as u64 * y1) &BITMASK!(51);
      //y1が27でそれを23とくっつけてるのもなんか変 結果は51bitなので
      //wire [49:0] l2;
      let l2 = ((y1>>2) * (y1>>2)) & BITMASK!(50);
    
      //wire [49:0] m21;
      let m21 =((k2>>26)* (l2>>25)) & BITMASK!(50);
    
      //wire [29:0] n2;
      let n2 = (y1<<1) + y1;
      // println!("n2 = {:b}",n2);
      
      //wire [30:0] p2;
      let p2 = BITMASK!(31)&(0x100000000 + (n2<<1) - (m21>>20));//?
    
      //wire [26:0] y2;
      let y2 = BITMASK!(27)&if bit_true64(p2, 1) && (bit_true64(p2, 0) || bit_true64(p2, 2)) {((p2>>2)&BITMASK!(27)) + 1} else {((p2>>2)&BITMASK!(27))};
      //??
      //{p2[28:2]} + 28'b1って桁合ってるの？
      // println!("y2 = {:b}",y2);
    
      //wire [24:0] mye;
      let mye = BITMASK!(25)&if bit_true64(y2, 26) {
        if bit_true64(y2, 2) {(y2>>3)+1} else {y2>>3}
      } else
      {
        if bit_true64(y2, 1) {(y2>>2)+1} else {y2>>2}
    
      };//??
      
      //wire [22:0] my;
      let my = if bit_true64(mye, 24) {0} else {mye & BITMASK!(23)};
      // println!("my = {:b}",my);
    
      //wire [7:0] eye;
      let eye = BITMASK!(8)&if bit_true64(y2, 26) {254+256 - ea} else {253+256 - ea};//??
    
      //wire [7:0] ey;
      let ey = BITMASK!(8)&if bit_true64(mye, 24) {(eye + 1)} else {eye};//??
      // println!("ey = {:b}",ey);
    
      //wire [31:0] y_mul;
      //wire ovf_mul;
      //fmul u1(x, {s, ey, my}, y_mul, ovf_mul);
      //let y_mul = (f*f32::from_bits((s<<31)+(ey<<23)+(my as u32))).to_bits();
      let y_mul = mul_fpu(f,f32::from_bits((s<<31)+(ey<<23)+(my as u32))).to_bits();
      // println!("y_mul = {:b}",y_mul);
    
      //wire nzm;
      let nzm = m!=0;
    
      let y =   if e == 255 && nzm {(s<<31)+(255<<23)+(1<<22)+(m&BITMASK!(22))} else
                if s == 0 && e == 255 && !nzm {(255<<23)} else
                if x==0 {0} else
                if s == 1 && (x&BITMASK!(31))==0 {1<<31} else 
                if s == 1 {(s<<31)+(255<<23)+(1<<22)+(0)} else {y_mul};
        
    f32::from_bits(y)
    /*endmodule
    
    `default_nettype wire
    */
}
